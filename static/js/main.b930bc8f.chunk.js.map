{"version":3,"sources":["constants.js","components/CountryList.js","components/Controls.js","hooks/useWindowDimensions.js","components/Annotations.js","components/SelectGeographies.js","components/RandomMap.js","components/SideMenu.js","components/Container.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["defaultUUID","uuidv4","styles","makeStyles","theme","listItemIcon","minWidth","spacing","CountryList","countries","classes","List","component","className","root","map","country","index","ListItem","button","key","rsmKey","ListItemIcon","ListItemText","primary","properties","saveSvgAsPng","require","imageOptions","scale","encoderOptions","backgroundColor","padding","marginTop","margin","fontSize","Controls","onUpdate","defaultValues","selected","React","useState","formValues","setFormValues","doSubmit","e","preventDefault","noValidate","autoComplete","onSubmit","TextField","id","name","label","type","size","InputLabelProps","shrink","value","countryCount","onChange","target","Button","variant","color","startIcon","onClick","document","getElementById","getWindowDimensions","window","width","innerWidth","height","innerHeight","Annotations","useTheme","useMemo","geo","centroid","geoCentroid","postive","Math","random","subject","dx","dy","x","y","typography","alignmentBaseline","SelectGeographies","geographies","selectCount","setSelected","mapId","rng","seedrandom","sort","left","right","slice","select","selectedNames","useEffect","includes","geography","style","default","fill","palette","main","stroke","secondary","strokeWidth","svgContainer","position","verticalAlign","parentSvg","RandomMap","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","maxWidth","maxHeight","viewBox","preserveAspectRatio","useStyles","display","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","toolbar","alignItems","justifyContent","mixins","SideMenu","children","open","setOpen","Drawer","clsx","paper","IconButton","content","flexGrow","Container","useQueryParams","withDefault","NumberParam","StringParam","query","setQuery","Box","controls","console","log","createMuiTheme","red","blue","status","danger","queryStringifyOptions","transformSearchString","transformSearchStringJsonSafe","App","ThemeProvider","CssBaseline","ReactRouterRoute","Route","stringifyOptions","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b930bc8f.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const drawerWidth = 240;\r\nexport const defaultContries = 10;\r\nexport const svgId = \"map-svg\";\r\nexport const exportFileName = \"countries.png\";\r\nexport const geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\nexport const defaultUUID = uuidv4();","import { List, ListItem, ListItemIcon, ListItemText } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport React from \"react\";\r\n\r\nconst styles = makeStyles((theme) => ({\r\n  listItemIcon: {\r\n    minWidth: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction CountryList({ countries }) {\r\n  const classes = styles();\r\n  return (\r\n    <List component=\"nav\" className={classes.root}>\r\n      {countries.map((country, index) => (\r\n        <ListItem button key={country.rsmKey}>\r\n          <ListItemIcon className={classes.listItemIcon}>\r\n            {index + 1}\r\n          </ListItemIcon>\r\n          <ListItemText primary={country.properties[\"NAME\"]} />\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default CountryList;\r\n","import { Button, TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ImageIcon from \"@material-ui/icons/Image\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport React from \"react\";\r\nimport { exportFileName, svgId } from \"../constants\";\r\nimport CountryList from \"./CountryList\";\r\n\r\nconst saveSvgAsPng = require(\"save-svg-as-png\");\r\n\r\nconst imageOptions = {\r\n  scale: 5,\r\n  encoderOptions: 1,\r\n  backgroundColor: \"white\",\r\n};\r\n\r\nconst styles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  button: {\r\n    marginTop: theme.spacing(1),\r\n    margin: theme.spacing(0.5),\r\n    fontSize: \"0.5em\",\r\n  },\r\n  listItemIcon: {\r\n    minWidth: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction Controls({ onUpdate, defaultValues, selected }) {\r\n  const [formValues, setFormValues] = React.useState({    \r\n    ...defaultValues,\r\n  });\r\n\r\n  const doSubmit = (e) => {\r\n    e.preventDefault();\r\n    onUpdate(formValues);\r\n  };\r\n\r\n  const updateFormValues = (e) => {\r\n    e.preventDefault();\r\n    setFormValues({\r\n      ...formValues,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const saveSvg = (e) => {\r\n    e.preventDefault();\r\n    saveSvgAsPng.saveSvgAsPng(\r\n      document.getElementById(svgId),\r\n      exportFileName,\r\n      imageOptions\r\n    );\r\n  };\r\n\r\n  const classes = styles();\r\n\r\n  return (\r\n    <>\r\n      <form\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={doSubmit}\r\n        className={classes.root}\r\n      >        \r\n        <div>\r\n          <TextField\r\n            id=\"countryCount\"\r\n            name=\"countryCount\"\r\n            label=\"No. Countries\"\r\n            type=\"number\"\r\n            size=\"small\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            value={formValues.countryCount}\r\n            onChange={updateFormValues}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            component=\"span\"\r\n            className={classes.button}\r\n            startIcon={<RefreshIcon />}\r\n            onClick={doSubmit}\r\n          >\r\n            Update\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            size=\"small\"\r\n            component=\"span\"\r\n            className={classes.button}\r\n            startIcon={<ImageIcon />}\r\n            onClick={saveSvg}\r\n          >\r\n            Export\r\n          </Button>\r\n        </div>\r\n      </form>\r\n      <div>\r\n        <CountryList countries={selected} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Controls;\r\n","import { useState, useEffect } from 'react';\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}","import { geoCentroid } from \"d3-geo\";\r\nimport React, { useMemo } from \"react\";\r\nimport { Annotation } from \"react-simple-maps\";\r\nimport {useTheme} from \"@material-ui/core\"\r\n\r\nfunction Annotations({selected}) {\r\n    const theme = useTheme();    \r\n    return useMemo(() => selected.map((geo, index) => {                \r\n        const centroid = geoCentroid(geo);\r\n        const postive = Math.random() < 0.5 ? -1 : 1;\r\n        return (\r\n          <Annotation\r\n            key={geo.rsmKey}\r\n            subject={centroid}\r\n            dx={(10 + Math.random() * 20) * postive}\r\n            dy={10 + Math.random() * 20}\r\n          >\r\n            <text \r\n                x={postive === 1 ? 5 : -10} y={5} \r\n                fontSize={theme.typography.fontSize * 2} \r\n                alignmentBaseline=\"below\">\r\n              {index + 1}\r\n            </text>\r\n          </Annotation>\r\n        )\r\n      }), [selected, theme.typography.fontSize]);\r\n  }\r\n\r\n  export default Annotations;","import { useTheme } from \"@material-ui/core/styles\";\r\nimport React, { useEffect, useMemo } from \"react\";\r\nimport { Geography } from \"react-simple-maps\";\r\nimport seedrandom from 'seedrandom';\r\n\r\nconst select = (geographies, selectCount, mapId) => {\r\n  const rng = seedrandom(mapId);\r\n  // Shuffle array\r\n  const shuffled = geographies\r\n    .sort((left, right) => left.properties[\"NAME\"] > right.properties[\"NAME\"] ? 1 : -1)\r\n    .sort(() => 0.5 - rng());\r\n  // Get sub-array of first n elements after shuffled\r\n  return shuffled.slice(0, selectCount);\r\n};\r\n\r\nfunction SelectGeographies({ geographies, selectCount, setSelected, mapId }) {\r\n  const theme = useTheme();\r\n  const selected = useMemo(() => select(geographies, selectCount, mapId), [\r\n    selectCount,\r\n    geographies,\r\n    mapId\r\n  ]);\r\n  const selectedNames = selected.map((geo) => geo.properties[\"NAME\"]);\r\n\r\n  useEffect(() => {\r\n    setSelected(selected);\r\n  }, [selected, setSelected]);\r\n\r\n  return geographies.map((geo) => {\r\n    if (selectedNames.includes(geo.properties[\"NAME\"])) {\r\n      return (\r\n        <Geography\r\n          key={geo.rsmKey}\r\n          geography={geo}\r\n          style={{\r\n            default: {\r\n              fill: theme.palette.primary.main,\r\n              stroke: theme.palette.secondary.main,\r\n              strokeWidth: 1,\r\n            },\r\n          }}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <Geography\r\n          key={geo.rsmKey}\r\n          geography={geo}\r\n          style={{\r\n            default: {\r\n              fill: theme.palette.secondary.main,\r\n            },\r\n          }}\r\n        />\r\n      );\r\n    }\r\n  });\r\n}\r\n\r\nexport default SelectGeographies;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport React from \"react\";\r\nimport { ComposableMap, Geographies } from \"react-simple-maps\";\r\nimport { geoUrl, svgId } from '../constants';\r\nimport useWindowDimensions from \"../hooks/useWindowDimensions\";\r\nimport Annotations from \"./Annotations\";\r\nimport SelectGeographies from \"./SelectGeographies\";\r\n\r\nconst styles = makeStyles((theme) => ({\r\n  svgContainer: {\r\n    position: 'relative',\r\n    height: 0,\r\n    width: '100%', \r\n    padding: theme.spacing(4),    \r\n    verticalAlign: 'text-top'\r\n    \r\n  },\r\n  parentSvg: {\r\n    position: 'absolute', \r\n    padding: theme.spacing(4),\r\n    verticalAlign: 'text-top'\r\n  }\r\n}))\r\n\r\nfunction RandomMap({countryCount = 10, selected, setSelected, mapId}) {\r\n  const { height, width } = useWindowDimensions();\r\n  const classes = styles();\r\n\r\n  return (\r\n    <div \r\n      className={classes.svgContainer} \r\n      style={{\r\n        maxWidth: width,\r\n        maxHeight: height\r\n      }}\r\n      >\r\n        <svg \r\n          id={svgId}\r\n          className={classes.parentSvg}\r\n          viewBox={`0 0 ${width} ${height}`}\r\n          preserveAspectRatio=\"xMinYMax meet\">\r\n          <ComposableMap preserveAspectRatio=\"xMinYMin\">\r\n            <Geographies geography={geoUrl}>\r\n              {({geographies}) => \r\n                <SelectGeographies                   \r\n                  mapId={mapId}\r\n                  geographies={geographies} \r\n                  selectCount={countryCount} \r\n                  setSelected={setSelected}\r\n                />\r\n              }\r\n            </Geographies>\r\n            <Annotations selected={selected} />            \r\n          </ComposableMap>\r\n        </svg>      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RandomMap;\r\n","import Drawer from \"@material-ui/core/Drawer\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport Settings from \"@material-ui/icons/Settings\";\r\nimport clsx from \"clsx\";\r\nimport React from \"react\";\r\nimport { drawerWidth } from '../constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: \"flex\"\r\n    },\r\n    appBar: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      transition: theme.transitions.create([\"width\", \"margin\"], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n    },\r\n    appBarShift: {\r\n      marginLeft: drawerWidth,\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      transition: theme.transitions.create([\"width\", \"margin\"], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    menuButton: {\r\n      marginRight: 36,\r\n    },\r\n    hide: {\r\n      display: \"none\",\r\n    },\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n      whiteSpace: \"nowrap\",\r\n    },\r\n    drawerOpen: {\r\n      width: drawerWidth,\r\n      transition: theme.transitions.create(\"width\", {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    drawerClose: {\r\n      transition: theme.transitions.create(\"width\", {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      overflowX: \"hidden\",\r\n      width: theme.spacing(7) + 1,\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        width: theme.spacing(9) + 1,\r\n      },\r\n    },\r\n    toolbar: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"flex-end\",\r\n      padding: theme.spacing(0, 1),\r\n      // necessary for content to be below app bar\r\n      ...theme.mixins.toolbar,\r\n    },\r\n  }));\r\n\r\nfunction SideMenu({\r\n  children\r\n}) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const toggleDraw = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n\r\n  return (\r\n    <Drawer\r\n      variant=\"permanent\"\r\n      className={clsx(classes.drawer, {\r\n        [classes.drawerOpen]: open,\r\n        [classes.drawerClose]: !open,\r\n      })}\r\n      classes={{\r\n        paper: clsx({\r\n          [classes.drawerOpen]: open,\r\n          [classes.drawerClose]: !open,\r\n        }),\r\n      }}\r\n    >\r\n      <div className={classes.toolbar}>\r\n        <IconButton onClick={toggleDraw}>\r\n          {open ? <ChevronLeftIcon /> : <Settings />}\r\n        </IconButton>\r\n      </div>\r\n\r\n      {open && children}\r\n    </Drawer>\r\n  );\r\n}\r\n\r\nexport default SideMenu;\r\n","import Box from \"@material-ui/core/Box\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport React, { useEffect } from \"react\";\r\nimport { NumberParam, StringParam, useQueryParams, withDefault } from \"use-query-params\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { defaultContries, defaultUUID } from \"../constants\";\r\nimport Controls from \"./Controls\";\r\nimport RandomMap from \"./RandomMap\";\r\nimport SideMenu from \"./SideMenu\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction Container() {\r\n  const classes = useStyles();\r\n  const [query, setQuery] = useQueryParams({\r\n    countryCount: withDefault(NumberParam, defaultContries),\r\n    mapId: withDefault(StringParam, defaultUUID),\r\n  });\r\n  const [selected, setSelected] = React.useState([]);\r\n\r\n  const updateControls = (controls) => {\r\n    console.log('controls update to', controls);\r\n    setQuery(\r\n      {\r\n        mapId: uuidv4(),\r\n        countryCount: controls.countryCount,\r\n      },\r\n      \"push\"\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    setQuery({\r\n        mapId: uuidv4(),\r\n        ...query\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Box className={classes.root}>\r\n      <SideMenu countryCount={query.countryCount} selected={selected}>\r\n        <Controls\r\n          onUpdate={updateControls}\r\n          defaultValues={{\r\n            ...query,\r\n          }}\r\n          selected={selected}\r\n        />\r\n      </SideMenu>\r\n      <Box className={classes.content}>\r\n        <RandomMap\r\n          mapId={query.mapId}\r\n          countryCount={query.countryCount}\r\n          selected={selected}\r\n          setSelected={setSelected}\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Container;\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport blue from \"@material-ui/core/colors/blue\";\r\nimport red from \"@material-ui/core/colors/red\";\r\n\r\nexport default createMuiTheme({\r\n    palette: {\r\n      primary: red,\r\n      secondary: blue,\r\n    },\r\n    status: {\r\n      danger: \"orange\",\r\n    },\r\n    typography: {\r\n        fontSize: 12\r\n    }\r\n  })","import CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport React from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { QueryParamProvider, transformSearchStringJsonSafe } from \"use-query-params\";\r\nimport Container from \"./components/Container\";\r\nimport theme from \"./theme\";\r\n\r\nconst queryStringifyOptions = {\r\n  transformSearchString: transformSearchStringJsonSafe,\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Router>\r\n        <QueryParamProvider\r\n          ReactRouterRoute={Route}\r\n          stringifyOptions={queryStringifyOptions}\r\n        >\r\n          <Container />\r\n        </QueryParamProvider>\r\n      </Router>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}