{"version":3,"sources":["hooks/useWindowDimensions.js","components/Annotations.js","components/SelectGeographies.js","components/RandomMap.js","constants.js","components/CountryList.js","components/Controls.js","components/SideMenu.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["getWindowDimensions","window","width","innerWidth","height","innerHeight","Annotations","selected","theme","useTheme","useMemo","map","geo","index","centroid","geoCentroid","postive","Math","random","key","rsmKey","subject","dx","dy","x","y","fontSize","typography","alignmentBaseline","SelectGeographies","geographies","selectCount","setSelected","sort","slice","select","selectedNames","properties","useEffect","includes","geography","style","default","fill","palette","primary","main","stroke","secondary","strokeWidth","styles","makeStyles","svgContainer","position","padding","spacing","verticalAlign","parentSvg","RandomMap","countryCount","useState","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","classes","className","maxWidth","maxHeight","id","viewBox","preserveAspectRatio","listItemIcon","minWidth","CountryList","countries","List","component","root","country","ListItem","button","ListItemIcon","ListItemText","saveSvgAsPng","require","imageOptions","scale","encoderOptions","backgroundColor","marginTop","margin","Controls","setForm","form","React","formValues","setFormValues","noValidate","autoComplete","onSubmit","e","preventDefault","TextField","name","label","type","size","InputLabelProps","shrink","value","onChange","target","Button","variant","color","startIcon","onClick","document","getElementById","useStyles","display","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","toolbar","alignItems","justifyContent","mixins","SideMenu","setCountryCount","open","setOpen","Drawer","clsx","paper","IconButton","createMuiTheme","red","blue","status","danger","content","flexGrow","App","ThemeProvider","CssBaseline","Box","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ef4f4a17.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}","import { geoCentroid } from \"d3-geo\";\r\nimport React, { useMemo } from \"react\";\r\nimport { Annotation } from \"react-simple-maps\";\r\nimport {useTheme} from \"@material-ui/core\"\r\n\r\nfunction Annotations({selected}) {\r\n    const theme = useTheme();    \r\n    return useMemo(() => selected.map((geo, index) => {                \r\n        const centroid = geoCentroid(geo);\r\n        const postive = Math.random() < 0.5 ? -1 : 1;\r\n        return (\r\n          <Annotation\r\n            key={geo.rsmKey}\r\n            subject={centroid}\r\n            dx={(10 + Math.random() * 20) * postive}\r\n            dy={10 + Math.random() * 20}\r\n          >\r\n            <text \r\n                x={postive === 1 ? 5 : -10} y={5} \r\n                fontSize={theme.typography.fontSize} \r\n                alignmentBaseline=\"below\">\r\n              {index + 1}\r\n            </text>\r\n          </Annotation>\r\n        )\r\n      }), [selected, theme.typography.fontSize]);\r\n  }\r\n\r\n  export default Annotations;","import { useTheme } from \"@material-ui/core/styles\";\r\nimport React, { useEffect, useMemo } from \"react\";\r\nimport { Geography } from \"react-simple-maps\";\r\n\r\nconst select = (geographies, selectCount) => {\r\n  // Shuffle array\r\n  const shuffled = geographies.sort(() => 0.5 - Math.random());\r\n  // Get sub-array of first n elements after shuffled\r\n  return shuffled.slice(0, selectCount);\r\n};\r\n\r\nfunction SelectGeographies({ geographies, selectCount, setSelected }) {\r\n  const theme = useTheme();\r\n  const selected = useMemo(() => select(geographies, selectCount), [\r\n    selectCount,\r\n    geographies,\r\n  ]);\r\n  const selectedNames = selected.map((geo) => geo.properties[\"NAME\"]);\r\n\r\n  useEffect(() => {\r\n    setSelected(selected);\r\n  }, [selected, setSelected]);\r\n\r\n  return geographies.map((geo) => {\r\n    if (selectedNames.includes(geo.properties[\"NAME\"])) {\r\n      return (\r\n        <Geography\r\n          key={geo.rsmKey}\r\n          geography={geo}\r\n          style={{\r\n            default: {\r\n              fill: theme.palette.primary.main,\r\n              stroke: theme.palette.secondary.main,\r\n              strokeWidth: 1,\r\n            },\r\n          }}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <Geography\r\n          key={geo.rsmKey}\r\n          geography={geo}\r\n          style={{\r\n            default: {\r\n              fill: theme.palette.secondary.main,\r\n            },\r\n          }}\r\n        />\r\n      );\r\n    }\r\n  });\r\n}\r\n\r\nexport default SelectGeographies;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport React from \"react\";\r\nimport { ComposableMap, Geographies } from \"react-simple-maps\";\r\nimport { geoUrl, svgId } from '../constants';\r\nimport useWindowDimensions from \"../hooks/useWindowDimensions\";\r\nimport Annotations from \"./Annotations\";\r\nimport SelectGeographies from \"./SelectGeographies\";\r\n\r\nconst styles = makeStyles((theme) => ({\r\n  svgContainer: {\r\n    position: 'relative',\r\n    height: 0,\r\n    width: '100%', \r\n    padding: theme.spacing(4),    \r\n    verticalAlign: 'text-top'\r\n    \r\n  },\r\n  parentSvg: {\r\n    position: 'absolute', \r\n    padding: theme.spacing(4),\r\n    verticalAlign: 'text-top'\r\n  }\r\n}))\r\n\r\nfunction RandomMap({countryCount = 10, selected, setSelected}) {\r\n  const { height, width } = useWindowDimensions();\r\n  const classes = styles();\r\n\r\n  return (\r\n    <div \r\n      className={classes.svgContainer} \r\n      style={{\r\n        maxWidth: width,\r\n        maxHeight: height\r\n      }}\r\n      >\r\n        <svg \r\n          id={svgId}\r\n          className={classes.parentSvg}\r\n          viewBox={`0 0 ${width} ${height}`}\r\n          preserveAspectRatio=\"xMinYMax meet\">\r\n          <ComposableMap preserveAspectRatio=\"xMinYMin\">\r\n            <Geographies geography={geoUrl}>\r\n              {({geographies}) => \r\n                <SelectGeographies                   \r\n                  geographies={geographies} \r\n                  selectCount={countryCount} \r\n                  setSelected={setSelected}\r\n                />\r\n              }\r\n            </Geographies>\r\n            <Annotations selected={selected} />            \r\n          </ComposableMap>\r\n        </svg>      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RandomMap;\r\n","export const drawerWidth = 240;\r\nexport const defaultContries = 10;\r\nexport const svgId = \"map-svg\";\r\nexport const exportFileName = \"countries.png\";\r\nexport const geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n","import { List, ListItem, ListItemIcon, ListItemText } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport React from \"react\";\r\n\r\nconst styles = makeStyles((theme) => ({\r\n  listItemIcon: {\r\n    minWidth: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction CountryList({ countries }) {\r\n  const classes = styles();\r\n  return (\r\n    <List component=\"nav\" className={classes.root}>\r\n      {countries.map((country, index) => (\r\n        <ListItem button key={country.rsmKey}>\r\n          <ListItemIcon className={classes.listItemIcon}>\r\n            {index + 1}\r\n          </ListItemIcon>\r\n          <ListItemText primary={country.properties[\"NAME\"]} />\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default CountryList;\r\n","import { Button, TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport React from \"react\";\r\nimport { exportFileName, svgId } from '../constants';\r\nimport CountryList from \"./CountryList\";\r\n\r\nconst saveSvgAsPng = require('save-svg-as-png')\r\n\r\nconst imageOptions = {\r\n  scale: 5,\r\n  encoderOptions: 1,\r\n  backgroundColor: 'white',\r\n}\r\n\r\nconst styles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2)\r\n  },\r\n  button: {\r\n    marginTop: theme.spacing(1),\r\n    margin: theme.spacing(0.5),\r\n    fontSize: '0.5em',\r\n\r\n  },\r\n  listItemIcon: {\r\n    minWidth: theme.spacing(3),\r\n  }\r\n}))\r\n\r\nfunction Controls({ setForm, form, selected }) {\r\n  const [formValues, setFormValues] = React.useState({\r\n    countryCount: 0,\r\n    ...form,\r\n  });\r\n\r\n  const doSubmit = (e) => {\r\n    e.preventDefault();\r\n    setForm(formValues);\r\n  };\r\n\r\n  const updateFormValues = (e) => {\r\n    e.preventDefault();\r\n    setFormValues({\r\n      ...formValues,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const saveSvg = (e) => {\r\n    e.preventDefault();\r\n    saveSvgAsPng.saveSvgAsPng(document.getElementById(svgId), exportFileName, imageOptions);\r\n  }\r\n\r\n  const classes = styles();\r\n\r\n  return (\r\n    <>\r\n      <form noValidate autoComplete=\"off\" onSubmit={doSubmit} className={classes.root}>\r\n        <div>\r\n          <TextField\r\n            id=\"countryCount\"\r\n            name=\"countryCount\"\r\n            label=\"No. Countries\"\r\n            type=\"number\"\r\n            size=\"small\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            value={formValues.countryCount}\r\n            onChange={updateFormValues}\r\n          />\r\n        </div>\r\n        <div>\r\n            <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            component=\"span\"\r\n            className={classes.button}\r\n            startIcon={<RefreshIcon />}\r\n            >\r\n            Update\r\n            </Button>\r\n            <Button \r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            size=\"small\"\r\n            component=\"span\"\r\n            className={classes.button}\r\n            startIcon={<ImageIcon />}\r\n            onClick={saveSvg}>          \r\n                Export\r\n            </Button>\r\n        </div>        \r\n      </form>\r\n      <div>\r\n        <CountryList countries={selected}/>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Controls;","import Drawer from \"@material-ui/core/Drawer\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport Settings from \"@material-ui/icons/Settings\";\r\nimport clsx from \"clsx\";\r\nimport React from \"react\";\r\nimport { drawerWidth } from '../constants';\r\nimport Controls from \"./Controls\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: \"flex\"\r\n    },\r\n    appBar: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      transition: theme.transitions.create([\"width\", \"margin\"], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n    },\r\n    appBarShift: {\r\n      marginLeft: drawerWidth,\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      transition: theme.transitions.create([\"width\", \"margin\"], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    menuButton: {\r\n      marginRight: 36,\r\n    },\r\n    hide: {\r\n      display: \"none\",\r\n    },\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n      whiteSpace: \"nowrap\",\r\n    },\r\n    drawerOpen: {\r\n      width: drawerWidth,\r\n      transition: theme.transitions.create(\"width\", {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    drawerClose: {\r\n      transition: theme.transitions.create(\"width\", {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      overflowX: \"hidden\",\r\n      width: theme.spacing(7) + 1,\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        width: theme.spacing(9) + 1,\r\n      },\r\n    },\r\n    toolbar: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"flex-end\",\r\n      padding: theme.spacing(0, 1),\r\n      // necessary for content to be below app bar\r\n      ...theme.mixins.toolbar,\r\n    },\r\n  }));\r\n\r\nfunction SideMenu({countryCount, setCountryCount, selected}) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const toggleDraw = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const updateControls = (form) => {\r\n    setCountryCount(form.countryCount);\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      variant=\"permanent\"\r\n      className={clsx(classes.drawer, {\r\n        [classes.drawerOpen]: open,\r\n        [classes.drawerClose]: !open,\r\n      })}\r\n      classes={{\r\n        paper: clsx({\r\n          [classes.drawerOpen]: open,\r\n          [classes.drawerClose]: !open,\r\n        }),\r\n      }}\r\n    >\r\n      <div className={classes.toolbar}>\r\n        <IconButton onClick={toggleDraw}>\r\n          {open ? <ChevronLeftIcon /> : <Settings />}\r\n        </IconButton>\r\n      </div>\r\n\r\n      {open && <Controls \r\n        setForm={updateControls} \r\n        form={{ countryCount }} \r\n        selected={selected}\r\n        />}\r\n    </Drawer>\r\n  );\r\n}\r\n\r\nexport default SideMenu;\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport blue from \"@material-ui/core/colors/blue\";\r\nimport red from \"@material-ui/core/colors/red\";\r\n\r\nexport default createMuiTheme({\r\n    palette: {\r\n      primary: red,\r\n      secondary: blue,\r\n    },\r\n    status: {\r\n      danger: \"orange\",\r\n    },\r\n    typography: {\r\n        fontSize: 12\r\n    }\r\n  })","import Box from \"@material-ui/core/Box\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport { makeStyles, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport React from \"react\";\r\nimport RandomMap from \"./components/RandomMap\";\r\nimport SideMenu from './components/SideMenu';\r\nimport { defaultContries } from './constants';\r\nimport theme from './theme';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\"\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  }\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [countryCount, setCountryCount] = React.useState(defaultContries);\r\n  const [selected, setSelected] = React.useState([]);\r\n  \r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Box className={classes.root}>\r\n        <SideMenu \r\n          countryCount={countryCount} \r\n          setCountryCount={setCountryCount}           \r\n          selected={selected}\r\n        />\r\n        <Box className={classes.content}>\r\n          <RandomMap \r\n            countryCount={countryCount} \r\n            selected={selected}\r\n            setSelected={setSelected}\r\n          />\r\n        </Box>        \r\n      </Box>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}