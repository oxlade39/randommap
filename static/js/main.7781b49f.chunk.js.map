{"version":3,"sources":["constants.js","components/map/CountryList.js","components/map/Controls.js","components/map/Annotations.js","components/map/RandomMap.js","components/map/useMapControls.js","components/map/SideMenu.js","components/map/MapContainer.js","components/wordsearch/Container.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["defaultUUID","uuidv4","styles","makeStyles","theme","listItemIcon","minWidth","spacing","CountryList","countries","classes","List","component","className","root","map","country","index","ListItem","button","key","properties","name","ListItemIcon","ListItemText","primary","saveSvgAsPng","require","imageOptions","scale","encoderOptions","backgroundColor","padding","marginTop","margin","fontSize","Controls","onUpdate","defaultValues","selected","React","useState","formValues","setFormValues","doSubmit","e","preventDefault","noValidate","autoComplete","onSubmit","TextField","id","label","type","size","InputLabelProps","shrink","value","countryCount","onChange","target","Button","variant","color","startIcon","onClick","document","getElementById","Annotations","mercator","selectedSet","features","filter","feature","f","has","i","Text","verticalAnchor","x","centroid","y","bg","Map","data","width","height","centerX","centerY","Set","item","Mercator","translate","Countries","scaleQuantize","domain","range","Graticule","graticule","g","path","stroke","isSelected","d","fill","strokeWidth","event","console","log","center","RandomMap","world","style","display","flexDirection","flexGrow","ParentSize","parent","rx","useMapControls","useQueryParams","withDefault","NumberParam","mapId","StringParam","query","setQuery","update","random","useStyles","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","enteringScreen","drawerClose","overflowX","breakpoints","up","toolbar","alignItems","justifyContent","mixins","closedButtons","Buttons","open","toggleDraw","Fab","SideMenu","children","setOpen","Drawer","clsx","paper","content","MapContainer","setSelected","setWorld","useEffect","a","fetch","response","json","topojson","objects","getMap","items","selectCount","rng","seedrandom","shuffled","sort","left","right","slice","select","Box","Container","Grid","xScale","yScale","createMuiTheme","palette","red","secondary","blue","status","danger","typography","queryStringifyOptions","transformSearchString","transformSearchStringJsonSafe","App","ThemeProvider","CssBaseline","ReactRouterRoute","Route","stringifyOptions","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7781b49f.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const drawerWidth = 240;\r\nexport const defaultContries = 10;\r\nexport const svgId = \"map-svg\";\r\nexport const exportFileName = \"countries.png\";\r\nexport const geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\nexport const defaultUUID = uuidv4();","import { List, ListItem, ListItemIcon, ListItemText } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport React from \"react\";\r\n\r\nconst styles = makeStyles((theme) => ({\r\n  listItemIcon: {\r\n    minWidth: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction CountryList({ countries = [] }) {\r\n  const classes = styles();\r\n  return (\r\n    <List component=\"nav\" className={classes.root}>\r\n      {countries.map((country, index) => (\r\n        <ListItem button key={country.properties.name}>\r\n          <ListItemIcon className={classes.listItemIcon}>\r\n            {index + 1}\r\n          </ListItemIcon>\r\n          <ListItemText primary={country.properties.name} />\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default CountryList;\r\n","import { Button, TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ImageIcon from \"@material-ui/icons/Image\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport React from \"react\";\r\nimport { exportFileName, svgId } from \"../../constants\";\r\nimport CountryList from \"./CountryList\";\r\n\r\nconst saveSvgAsPng = require(\"save-svg-as-png\");\r\n\r\nconst imageOptions = {\r\n  scale: 5,\r\n  encoderOptions: 1,\r\n  backgroundColor: \"white\",\r\n};\r\n\r\nconst styles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  button: {\r\n    marginTop: theme.spacing(1),\r\n    margin: theme.spacing(0.5),\r\n    fontSize: \"0.5em\",\r\n  },\r\n  listItemIcon: {\r\n    minWidth: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction Controls({ onUpdate, defaultValues, selected }) {\r\n  const [formValues, setFormValues] = React.useState({    \r\n    ...defaultValues,\r\n  });\r\n\r\n  const doSubmit = (e) => {\r\n    e.preventDefault();\r\n    onUpdate(formValues);\r\n  };\r\n\r\n  const updateFormValues = (e) => {\r\n    e.preventDefault();\r\n    setFormValues({\r\n      ...formValues,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const saveSvg = (e) => {\r\n    e.preventDefault();\r\n    saveSvgAsPng.saveSvgAsPng(\r\n      document.getElementById(svgId),\r\n      exportFileName,\r\n      imageOptions\r\n    );\r\n  };\r\n\r\n  const classes = styles();\r\n\r\n  return (\r\n    <>\r\n      <form\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={doSubmit}\r\n        className={classes.root}\r\n      >        \r\n        <div>\r\n          <TextField\r\n            id=\"countryCount\"\r\n            name=\"countryCount\"\r\n            label=\"No. Countries\"\r\n            type=\"number\"\r\n            size=\"small\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            value={formValues.countryCount}\r\n            onChange={updateFormValues}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            component=\"span\"\r\n            className={classes.button}\r\n            startIcon={<RefreshIcon />}\r\n            onClick={doSubmit}\r\n          >\r\n            Update\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            size=\"small\"\r\n            component=\"span\"\r\n            className={classes.button}\r\n            startIcon={<ImageIcon />}\r\n            onClick={saveSvg}\r\n          >\r\n            Export\r\n          </Button>\r\n        </div>\r\n      </form>\r\n      <div>\r\n        <CountryList countries={selected} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Controls;\r\n","import { Text } from '@vx/text';\r\nimport React from \"react\";\r\n\r\n\r\nfunction Annotations({mercator, selectedSet}) {\r\n  return mercator.features\r\n    .filter(feature => {\r\n      const { feature: f} = feature;\r\n      const isSelected = selectedSet.has(f.properties.name) ? 1 : 0;\r\n      return isSelected;\r\n    })\r\n    .map((feature, i) => {\r\n      return (\r\n        <Text \r\n          key={feature.feature.properties.name}\r\n          verticalAnchor=\"start\"\r\n          x={feature.centroid[0]}\r\n          y={feature.centroid[1]}          \r\n        >\r\n          {i + 1}\r\n        </Text>\r\n      )\r\n    });\r\n  }\r\n\r\n  export default Annotations;","import { Graticule, Mercator } from '@vx/geo';\r\nimport { ParentSize } from '@vx/responsive';\r\nimport { scaleQuantize } from '@vx/scale';\r\nimport React from \"react\";\r\nimport Annotations from './Annotations';\r\nimport {svgId} from '../../constants'\r\n\r\nconst bg = '#006994';\r\n\r\nfunction RandomMap({world, selected}) {\r\n\r\n  return (\r\n    <div style={{\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      flexGrow: 1,\r\n      height: '100%'\r\n    }}>    \r\n      <ParentSize>\r\n        {(parent) => {\r\n          return (\r\n            <svg \r\n              id={svgId}\r\n              width=\"100%\"\r\n              height=\"100%\"\r\n              >\r\n              <rect x={0} y={0} fill={bg} rx={14} width=\"100%\" height=\"100%\"/>\r\n              {world && <Map data={world} selected={selected} width={parent.width} height={parent.height} />}\r\n            </svg>\r\n          )  \r\n        }}\r\n      </ParentSize>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Map({data, width, height, selected}) {  \r\n  const centerX = width / 2;\r\n  const centerY = height / 2;\r\n  const scale = width / 630 * 75;\r\n  const selectedSet = new Set(selected.map(item => item.properties.name))\r\n  return (\r\n      <Mercator \r\n        data={data.features} \r\n        scale={scale} \r\n        translate={[centerX, centerY + 50]}>\r\n        {mercator => {\r\n          return (\r\n            <>\r\n            <Countries mercator={mercator} selectedSet={selectedSet} />\r\n            <Annotations mercator={mercator} selectedSet={selectedSet} />\r\n            </>\r\n          );\r\n        }\r\n      }\r\n      </Mercator>\r\n  );\r\n}\r\n\r\nfunction Countries({mercator, selectedSet}) {\r\n  const color = scaleQuantize({\r\n    domain: [\r\n      0,\r\n      1\r\n    ],\r\n    range: ['#ffb01d', '#f63a48']\r\n  });\r\n  return (\r\n    <g>\r\n      <Graticule graticule={g => mercator.path(g)} stroke={'rgba(33,33,33,0.05)'} />\r\n      {mercator.features.map((feature, i) => {\r\n        const { feature: f } = feature;\r\n        const isSelected = selectedSet.has(f.properties.name) ? 1 : 0;\r\n        return (\r\n          <path\r\n            key={`map-feature-${i}`}\r\n            d={mercator.path(f)}\r\n            fill={color(isSelected ? 1 : 0)}\r\n            stroke={bg}\r\n            strokeWidth={0.5}\r\n            onClick={event => {\r\n              console.log({f, mercator, center: feature.centroid});\r\n            }}\r\n          />                  \r\n        );\r\n      })}\r\n    </g>\r\n  )\r\n}\r\n\r\nexport default RandomMap;\r\n","import { NumberParam, StringParam, useQueryParams, withDefault } from \"use-query-params\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { defaultContries, defaultUUID } from \"../../constants\";\r\n\r\nexport default function useMapControls() {\r\n    const [query, setQuery] = useQueryParams({\r\n        countryCount: withDefault(NumberParam, defaultContries),\r\n        mapId: withDefault(StringParam, defaultUUID),\r\n    });\r\n\r\n    const update = ({countryCount}) => {\r\n        setQuery(\r\n            {\r\n              mapId: uuidv4(),\r\n              countryCount: countryCount,\r\n            },\r\n            \"push\"\r\n          );\r\n    }\r\n\r\n    const random = () => {\r\n        setQuery(\r\n            {\r\n                ...query,\r\n                mapId: uuidv4(),                \r\n            }\r\n        )\r\n    }\r\n\r\n    return {query, update, random};\r\n}","import { Fab, List, ListItem, ListItemIcon } from \"@material-ui/core\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport Reload from '@material-ui/icons/Replay';\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport clsx from \"clsx\";\r\nimport React from \"react\";\r\nimport { drawerWidth } from '../../constants';\r\nimport useMapControls from \"./useMapControls\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: \"flex\"\r\n    },\r\n    appBar: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      transition: theme.transitions.create([\"width\", \"margin\"], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n    },\r\n    appBarShift: {\r\n      marginLeft: drawerWidth,\r\n      // width: `calc(100% - ${drawerWidth}px)`,\r\n      // transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      //   easing: theme.transitions.easing.sharp,\r\n      //   duration: theme.transitions.duration.enteringScreen,\r\n      // }),\r\n    },\r\n    menuButton: {\r\n      marginRight: 36,\r\n    },\r\n    hide: {\r\n      display: \"none\",\r\n    },\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n      whiteSpace: \"nowrap\",\r\n    },\r\n    drawerOpen: {\r\n      width: drawerWidth,\r\n      transition: theme.transitions.create(\"width\", {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    drawerClose: {\r\n      transition: theme.transitions.create(\"width\", {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      overflowX: \"hidden\",\r\n      width: theme.spacing(7) + 1,\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        width: theme.spacing(9) + 1,\r\n      },\r\n    },\r\n    toolbar: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"flex-end\",\r\n      padding: theme.spacing(0, 1),\r\n      // necessary for content to be below app bar\r\n      ...theme.mixins.toolbar,\r\n    },\r\n    closedButtons: {\r\n      minWidth: 0\r\n    }\r\n  }));\r\n\r\nfunction Buttons({open, toggleDraw}) {\r\n  const classes = useStyles();\r\n  const { random } = useMapControls();\r\n  if (open) {\r\n    return (\r\n      <Fab onClick={toggleDraw} size=\"small\">\r\n        <ChevronLeftIcon />\r\n      </Fab>\r\n    )\r\n      \r\n  } else {\r\n    return (      \r\n      <List className={classes.closedButtons}>\r\n        <ListItem button onClick={toggleDraw}>\r\n          <ListItemIcon>\r\n            <Visibility />\r\n          </ListItemIcon>          \r\n        </ListItem>\r\n        <ListItem button onClick={random}>\r\n          <ListItemIcon>\r\n            <Reload />\r\n          </ListItemIcon>          \r\n        </ListItem>\r\n        <ListItem>                  \r\n        </ListItem>      \r\n      </List>\r\n    )\r\n  }\r\n}\r\n\r\nfunction SideMenu({\r\n  children\r\n}) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const toggleDraw = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n\r\n  return (\r\n    <Drawer\r\n      variant=\"permanent\"\r\n      className={clsx(classes.drawer, {\r\n        [classes.drawerOpen]: open,\r\n        [classes.drawerClose]: !open,\r\n      })}\r\n      classes={{\r\n        paper: clsx({\r\n          [classes.drawerOpen]: open,\r\n          [classes.drawerClose]: !open,\r\n        }),\r\n      }}\r\n    >\r\n      <div className={classes.toolbar}>\r\n        <Buttons toggleDraw={toggleDraw} open={open} />\r\n      </div>\r\n\r\n      {open && children}\r\n    </Drawer>\r\n  );\r\n}\r\n\r\nexport default SideMenu;\r\n","import Box from \"@material-ui/core/Box\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport React, { useEffect } from \"react\";\r\nimport seedrandom from 'seedrandom';\r\nimport * as topojson from 'topojson-client';\r\nimport Controls from \"./Controls\";\r\nimport RandomMap from \"./RandomMap\";\r\nimport SideMenu from \"./SideMenu\";\r\nimport useMapControls from './useMapControls';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: 'row',\r\n    height: '100%'\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    flexDirection: 'row',\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nconst select = (features = [], selectCount, mapId) => {\r\n  const rng = seedrandom(mapId);\r\n  // Shuffle array\r\n  const shuffled = features\r\n    .sort((left, right) => left.properties.name > right.properties.name ? 1 : -1)\r\n    .sort(() => 0.5 - rng());\r\n  // Get sub-array of first n elements after shuffled\r\n  const items = shuffled.slice(0, selectCount);\r\n  return items;\r\n};\r\n\r\nfunction MapContainer() {\r\n  const classes = useStyles();  \r\n  const [selected, setSelected] = React.useState([]);\r\n  const [world, setWorld] = React.useState();\r\n  const { query, update } = useMapControls();\r\n\r\n  useEffect(() => {\r\n\r\n    const getMap = async () => {\r\n      const response = await fetch('https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json');\r\n      const data = await response.json();\r\n      setWorld(topojson.feature(data, data.objects.countries));\r\n    }\r\n    getMap();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (world) {\r\n      const items = select(world.features, query.countryCount, query.mapId)\r\n      setSelected(items);\r\n    }\r\n  }, [world, query, setSelected])\r\n\r\n  return (\r\n    <Box className={classes.root}>\r\n      <SideMenu countryCount={query.countryCount} selected={selected}>\r\n        <Controls\r\n          onUpdate={update}\r\n          defaultValues={{\r\n            ...query,\r\n          }}\r\n          selected={selected}\r\n        />\r\n      </SideMenu>\r\n      <Box className={classes.content}>\r\n        <RandomMap\r\n          selected={selected}\r\n          world={world}\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default MapContainer;\r\n","import React from 'react';\r\nimport { Grid } from '@vx/grid';\r\n\r\nfunction Container() {\r\n    return (\r\n        <>\r\n        <h1>Word Search</h1>\r\n        <Grid \r\n            xScale={10}\r\n            yScale={10}\r\n            width={100}\r\n            height={100}            \r\n        />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Container;","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport blue from \"@material-ui/core/colors/blue\";\r\nimport red from \"@material-ui/core/colors/red\";\r\n\r\nexport default createMuiTheme({\r\n    palette: {\r\n      primary: red,\r\n      secondary: blue,\r\n    },\r\n    status: {\r\n      danger: \"orange\",\r\n    },\r\n    typography: {\r\n        fontSize: 12\r\n    }\r\n  })","import CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { QueryParamProvider, transformSearchStringJsonSafe } from \"use-query-params\";\r\nimport MapContainer from \"./components/map/MapContainer\";\r\nimport WordsearchContainer from \"./components/wordsearch/Container\";\r\nimport theme from \"./theme\";\r\n\r\nconst queryStringifyOptions = {\r\n  transformSearchString: transformSearchStringJsonSafe,\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Router>\r\n        <QueryParamProvider\r\n          ReactRouterRoute={Route}\r\n          stringifyOptions={queryStringifyOptions}\r\n        >\r\n          <Switch>\r\n            <Route path=\"/map\">\r\n              <MapContainer />\r\n            </Route>\r\n            <Route path=\"/wordsearch\">\r\n              <WordsearchContainer />\r\n            </Route>            \r\n            <Route>\r\n              <MapContainer />\r\n            </Route>\r\n          </Switch>          \r\n        </QueryParamProvider>\r\n      </Router>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}